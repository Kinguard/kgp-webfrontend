{
  "name": "grunt-debian-package",
  "description": "Create debian package from grunt build",
  "version": "0.1.9",
  "homepage": "https://github.com/jamesdbloom/grunt-debian-package",
  "author": {
    "name": "James Bloom",
    "email": "jamesdbloom@gmail.com",
    "url": "http://blog.jamesdbloom.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jamesdbloom/grunt-debian-package.git"
  },
  "bugs": {
    "url": "https://github.com/jamesdbloom/grunt-debian-package/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jamesdbloom/grunt-debian-package/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt travis"
  },
  "dependencies": {
    "dateformat": "^1.0.7-1.2.3",
    "node-spawn": "0.0.7",
    "replace": "^0.2.9"
  },
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-jshint": "~0.10",
    "grunt-contrib-nodeunit": "~0.4",
    "grunt-run-node": "^0.1.0"
  },
  "peerDependencies": {
    "grunt": "~0.4"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-debian-package \n\n> Create debian package from grunt build\n\nGrunt plugin to create a Debian package, allowing JavaScript applications to be easily integration into a Debian or Ubuntu based continuous delivery pipeline.\n\n[![Build Status](https://secure.travis-ci.org/jamesdbloom/grunt-debian-package.png?branch=master)](http://travis-ci.org/jamesdbloom/grunt-debian-package)  [![Dependency Status](https://david-dm.org/jamesdbloom/grunt-debian-package.png)](https://david-dm.org/jamesdbloom/grunt-debian-package) [![devDependency Status](https://david-dm.org/jamesdbloom/grunt-debian-package/dev-status.png)](https://david-dm.org/jamesdbloom/grunt-debian-package#info=devDependencies) [![Code Climate](https://codeclimate.com/github/jamesdbloom/grunt-debian-package.png)](https://codeclimate.com/github/jamesdbloom/grunt-debian-package)\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/jamesdbloom/grunt-debian-package/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\") [![Stories in Backlog](https://badge.waffle.io/jamesdbloom/grunt-debian-package.png?label=backlog&title=Backlog)](https://waffle.io/jamesdbloom/grunt-debian-package)\n\n\n\n[![NPM](https://nodei.co/npm/grunt-debian-package.png?downloads=true&stars=true)](https://nodei.co/npm/grunt-debian-package/)\n\n## Getting Started\nThis plugin requires Grunt `~0.4`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-debian-package --save-dev\n```\n\nYou will also need to install two debian tools used to create and lint the debian package, as follows:\n\n```shell\nsudo apt-get install devscripts\nsudo apt-get install debhelper\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-debian-package');\n```\n\nTo print out verbose messages during packaging use --verbose, for example:\n\n```shell\ngrunt debian_package --verbose\n```\n\nTo debug any issues with the **debian_package** task configuration:\n\n**1.** use the node-inspector:\n\n```shell\nsudo npm install -g node-inspector\nnode --debug-brk $(which grunt) debian_package --verbose\n```\n\n**2.** in another shell process:\n\n```shell\nnode-inspector\n```\n\n**3.** open the url displayed in a browser\n\n## The \"debian_package\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `debian_package` to the data object passed into `grunt.initConfig()`.\n\nTypically the options section would not need to be provided as these values are read from the **package.json** file for the project.  In this example, however, custom options are used to override the default values.  For more details on the default values see below.\n\n```js\ngrunt.initConfig({\n  debian_package: {\n    options: {\n        maintainer: {\n            name: \"James D Bloom\",\n            email: \"jamesdbloom@email.com\"\n        },\n        prefix: \"prefix-\",\n        name: \"package_name\",\n        postfix: \"-postfix\",\n        short_description: \"the short description\",\n        long_description: \"the long description added to the debian package\",\n        version: \"2.0.0\",\n        build_number: \"1\",\n        links: [\n            {\n                source: '/var/log/${name}',\n                target: '/var/log/tomcat7'\n            },\n            {\n                source: '/etc/init.d/${name}',\n                target: '/etc/init.d/tomcat7'\n            }\n        ],\n        directories: [\n            '/var/app/${name}'\n        ]\n    },\n    files: [\n        {\n            expand: true,       // enable dynamic expansion\n            cwd: 'build/',      // src matches are relative to this path\n            src: [              // actual pattern(s) to match\n                '**/*.js',\n                '**/*.html',\n                '**/*.css'\n            ],\n            dest: '/var/www/'   // destination path prefix\n        },\n        {                       // use template in file path\n            src:  'config/<%= grunt.package.name %>.json',\n            dest: '/var/www/<%= grunt.package.name %>.json'\n        }\n    ]\n  }\n});\n```\n\nThis will result in a package being created called **prefix-package_name-postfix-2.0.0-1.deb**.  The configuration above will result in the package containing all **\\*.js**, **\\*.css** and **\\*.html** files in the **build** directory.  These files will be installed into **/var/wwww/** when the package is installed.  In addition the package will contain **/var/wwww/package_name.json** as a copy of the **config/package_name.json** file in the project.  The config above will also add two soft-links and an empty directory into the package.  Both the links and directories sections can use the following placeholders `${name}`, `${version}` and `${build_name}` to refer to the package name, version and build number respectively.\n\nUsing the `dpkg -c package_name-2.0.0-1.deb` command it is possible to see the package contents:\n\n```shell\ndpkg -c prefix-package_name-postfix-2.0.0-1.deb\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./usr/share/\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./usr/share/doc/\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./usr/share/doc/prefix-package_name-postfix/\n-rw-r--r-- jenkins/jenkins       163 2014-04-27 15:08 ./usr/share/doc/prefix-package_name-postfix/changelog.Debian.gz\n-rw-r--r-- jenkins/jenkins         0 2014-04-27 15:08 ./usr/share/doc/prefix-package_name-postfix/copyright\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./var/\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./var/app/\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./var/app/package_name/\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./var/www/\n-rwxr-xr-x jenkins/jenkins     12369 2014-04-24 05:57 ./var/www/index.html\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./var/www/js/\n-rw-r--r-- jenkins/jenkins      1600 2014-04-24 05:57 ./var/www/js/example.min.js\n-rw-r--r-- jenkins/jenkins      3210 2014-04-24 05:57 ./var/www/js/example.min.map\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./var/www/css/\n-rw-r--r-- jenkins/jenkins      1529 2014-04-24 05:57 ./var/www/css/example.css\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./etc/\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./etc/init.d/\nlrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./etc/init.d/tomcat7 -> package_name\ndrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./var/log/\nlrwxr-xr-x jenkins/jenkins         0 2014-04-27 15:08 ./var/log/tomcat7 -> package_name\n```\n\nUsing the `dpkg -I prefix-package_name-postfix-2.0.0-1.deb` command it is possible to see the package information: \n\n```shell\ndpkg -I prefix-package_name-postfix-2.0.0-1.deb\n new debian package, version 2.0.\n size 7300 bytes: control archive= 605 bytes.\n     226 bytes,     9 lines      control              \n     507 bytes,     7 lines      md5sums              \n Package: prefix-package_name-postfix\n Version: 2.0.0-1\n Architecture: i386\n Maintainer: James D Bloom <jamesdbloom@email.com>\n Installed-Size: 35\n Section: misc\n Priority: optional\n Description: the short description\n  the long description added to the debian package\n```\n\nTo install the package use: `sudo dpkg -i prefix-package_name-postfix-2.0.0-1.deb`\n\n```shell\nsudo dpkg -i prefix-package_name-postfix-2.0.0-1.deb \nSelecting previously unselected package prefix-package_name-postfix.\n(Reading database ... 39938 files and directories currently installed.)\nUnpacking prefix-package_name-postfix (from package_name_2.0.0-1_i386.deb) ...\nSetting up prefix-package_name-postfix (2.0.0-1) ...\nProcessing triggers for ureadahead ...\n```\n\nOnce installed the `dpkg -l` command will list the package:\n\n```shell\ndpkg -l | grep prefix-package_name-postfix\n prefix-package_name-postfix                     2.0.0-1                    the short description\n```\n\nAnd `dpkg -L prefix-package_name-postfix` will list the installed files:\n\n```shell\ndpkg -L prefix-package_name-postfix\n/.\n/usr/share/\n/usr/share/doc/\n/usr/share/doc/prefix-package_name-postfix/\n/usr/share/doc/prefix-package_name-postfix/changelog.Debian.gz\n/usr/share/doc/prefix-package_name-postfix/copyright\n/var/\n/var/app/\n/var/app/package_name/\n/var/www/\n/var/www/index.html\n/var/www/js/\n/var/www/js/example.min.js\n/var/www/js/example.min.map\n/var/www/css/\n/var/www/css/example.css\n/etc/\n/etc/init.d/\n/etc/init.d/tomcat7 -> package_name\n/var/log/\n/var/log/tomcat7 -> package_name\n```\n\n### Options\n\n#### options.maintainer.name\nType: `String`\nDefault value: `process.env.DEBFULLNAME`\n\nThis value specifies the maintainer's name for the debian package.  The default value is taken from the standard debian environment variable `DEBFULLNAME`.\n\n#### options.maintainer.email\nType: `String`\nDefault value: `process.env.DEBEMAIL`\n\nThis value specifies the maintainer's email for the debian package.  The default value is taken from the standard debian environment variable `DEBEMAIL`.\n\n#### options.prefix\nType: `String`\nDefault value: ''\n\nThis value specifies a prefix for the debian package name.  This is useful is the package name is taken from the package.json but requires a prefix (i.e. for company name).\n\n#### options.name\nType: `String`\nDefault value: **package.json** `name`\n\nThis value specifies the name of the debian package.  The default value is taken from the package.json name value.\n\n#### options.postfix\nType: `String`\nDefault value: ''\n\nThis value specifies a postfix for the debian package name.  This is useful is the package name is taken from the package.json but requires a postfix (i.e. for git branch).\n\n#### options.short_description\nType: `String`\nDefault value: **package.json** `description` first line only\n\nThis value specifies the short description for the debian package, for example, this is displayed when listing all packages using the `dpkg -l` command.  The default value is taken from the first line of the package.json description value.\n\n#### options.long_description\nType: `String`\nDefault value: **package.json** `description` all except first line\n\nThis value specifies the multiple line long description for the debian package, for example, this is displayed when quering package status using the `dpkg -s <package.name>` command.  The default value is taken from all text **after the end of the first line** of the package.json description value.\n\n#### options.version\nType: `String`\nDefault value: **package.json** `version`\n\nThe first part of the version number.  This version number is intended to respresent the logical version of the code in the package.  The default value is taken from the package.json version value.\n\n#### options.build_number\nType: `String`\nDefault value: `process.env.BUILD_NUMBER || process.env.DRONE_BUILD_NUMBER || process.env.TRAVIS_BUILD_NUMBER`\n\nThe second part of the version number.  This version number is intended to respresent a specific build of the package, for example this package might represetn the Jenkins or drone.io or TravisCI build number.  The default value is taken from an environment variable called `BUILD_NUMBER` or `DRONE_BUILD_NUMBER` or `TRAVIS_BUILD_NUMBER` which is compatible with Jenkins, drone.io and TravisCI respectively.\n\n#### options.links\nType: `String`\nDefault value: `undefined`\n\nThis value specifies a list of soft-links that should be added into the package.  Each soft-link is specified using a `source` and a `target` value.  Both the links and directories sections can use the following placeholders `${name}`, `${version}` and `${build_name}` to refer to the package name, version and build number respectively, see example above.\n\n#### options.directories\nType: `String`\nDefault value: `undefined`\n\nThis value specifies a list of directories that should be added into the package.  Both the links and directories sections can use the following placeholders `${name}`, `${version}` and `${build_name}` to refer to the package name, version and build number respectively, see example above.\n\n#### options.preinst.src\nType: `String`\nDefault value: `undefined`\n\nThis value specifies the path of the preinst script, the contents of this file will be copied into the preinst script.  If both `src` and `contents` are specified `src` will take precedence. The preinst script is executed before the package is unpacked from its Debian archive (\".deb\") file. Many 'preinst' scripts stop services for packages which are being upgraded until their installation or upgrade is completed (following the successful execution of the 'postinst' script).\n\n#### options.preinst.contents\nType: `String`\nDefault value: `undefined`\n\nThis value specifies the contents of the preinst script, the value will be copied into the preinst script.  If both `src` and `contents` are specified `src` will take precedence. The preinst script is executed before the package is unpacked from its Debian archive (\".deb\") file. Many 'preinst' scripts stop services for packages which are being upgraded until their installation or upgrade is completed (following the successful execution of the 'postinst' script).\n\n#### options.postinst.src\nType: `String`\nDefault value: `undefined`\n\nThis value specifies the path of the postinst script, the contents of this file will be copied into the postinst script.  If both `src` and `contents` are specified `src` will take precedence. The postinst script typically completes any required configuration of the package foo once foo has been unpacked from its Debian archive (\".deb\") file. Often, 'postinst' scripts ask the user for input, and/or warn the user that if he accepts default values, he should remember to go back and re-configure that package as the situation warrants. Many 'postinst' scripts then execute any commands necessary to start or restart a service once a new package has been installed or upgraded.\n\n#### options.postinst.contents\nType: `String`\nDefault value: `undefined`\n\nThis value specifies the contents of the postinst script, the value will be copied into the postinst script.  If both `src` and `contents` are specified `src` will take precedence. The postinst script typically completes any required configuration of the package foo once foo has been unpacked from its Debian archive (\".deb\") file. Often, 'postinst' scripts ask the user for input, and/or warn the user that if he accepts default values, he should remember to go back and re-configure that package as the situation warrants. Many 'postinst' scripts then execute any commands necessary to start or restart a service once a new package has been installed or upgraded.\n\n#### options.prerm.src\nType: `String`\nDefault value: `undefined`\n\nThis value specifies the path of the prerm script, the contents of this file will be copied into the prerm script.  If both `src` and `contents` are specified `src` will take precedence. The prerm script typically stops any daemons which are associated with a package. It is executed before the removal of files associated with the package.\n\n#### options.prerm.contents\nType: `String`\nDefault value: `undefined`\n\nThis value specifies the contents of the prerm script, the value will be copied into the prerm script.  If both `src` and `contents` are specified `src` will take precedence. The prerm script typically stops any daemons which are associated with a package. It is executed before the removal of files associated with the package.\n\n#### options.postrm.src\nType: `String`\nDefault value: `undefined`\n\nThis value specifies the path of the postrm script, the contents of this file will be copied into the postrm script.  If both `src` and `contents` are specified `src` will take precedence. The postrm script typically modifies links or other files associated with foo, and/or removes files created by the package.\n\n#### options.postrm.contents\nType: `String`\nDefault value: `undefined`\n\nThis value specifies the contents of the postrm script, the value will be copied into the postrm script.  If both `src` and `contents` are specified `src` will take precedence. The postrm script typically modifies links or other files associated with foo, and/or removes files created by the package.\n\n### Files\n\nThe files configuration specifies the files to add into the package.\n\nThis task supports all the file mapping format Grunt supports. Please read [Globbing patterns](http://gruntjs.com/configuring-tasks#globbing-patterns) and [Building the files object dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically) for additional details.\n\n### Usage Examples\n\n#### Default Options\n\nThe following example configuration shows the default values for the options.  A files section is added which will add all files in the `dist` directory into the `/var/www/` directory in the package.\n\n```js\ngrunt.initConfig({\n  debian_package: {\n    files: {\n        src: [\n            'dist/**',\n            '!dist'\n        ]\n        dest: '/var/www/'\n    }\n  },\n});\n```\n\nNot providing any options will result in the following default values:\n\n```js\nvar properties = require(process.cwd() + '/package.json');\n\noptions: {\n  maintainer: process.env.DEBFULLNAME && process.env.DEBEMAIL && {\n      name: process.env.DEBFULLNAME,\n      email: process.env.DEBEMAIL\n  },\n  name: properties.name,\n  short_description: properties.description && properties.description.split(/\\r\\n|\\r|\\n/g)[0],\n  long_description: properties.description && properties.description.split(/\\r\\n|\\r|\\n/g).splice(1).join(' '),\n  version: properties.version,\n  build_number: process.env.BUILD_NUMBER || process.env.DRONE_BUILD_NUMBER || process.env.TRAVIS_BUILD_NUMBER\n}\n```\n\n**maintainer** is taken from the standard debian environment variables `DEBFULLNAME` and `DEBEMAIL`.  **name**, **short_description**, **long_description** and **version** are all read from the *package.json*.  **short_description** is taken as the first line of the `description` value and **long_description** is taken as the rest of the `description` value.  **build_number** is taken from the the environment variables `BUILD_NUMBER` or `DRONE_BUILD_NUMBER` or `TRAVIS_BUILD_NUMBER` which are the build number environment variables for Jenkins, drone.io and TravisCI respectively.\n\n## Future Plans\n1. Add options to support custom copyright file\n2. Add options to support generation of changelist from git log\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n * 2014-27-04   v0.1.0   Released debian_package task\n * 2014-28-04   v0.1.1   Fixed issue with some dependencies\n * 2014-28-04   v0.1.2   Add back missing dirs and links files\n * 2014-29-04   v0.1.3   Removed requirement for long descriptions\n * 2014-03-05   v0.1.4   Added test framework and fixed bugs\n * 2014-15-05   v0.1.5   Added support for dput\n * 2014-16-05   v0.1.6   Fixed errors with package upload\n * 2014-23-06   v0.1.7   Added support for postfix\n * 2014-24-06   v0.1.8   Minor tweaks and better test coverage\n * 2014-09-07   v0.1.9   Added initial support for post/pre scripts\n\n---\n\nTask submitted by [James D Bloom](http://blog.jamesdbloom.com)\n",
  "readmeFilename": "README.md",
  "_id": "grunt-debian-package@0.1.9",
  "_from": "grunt-debian-package@"
}
